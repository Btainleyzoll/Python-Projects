import socket
import os
import sys
import datetime
from vulnerability_scanner import connect_port
from service_detection import find_banner
from vulnerability_db import find_vulnerability, load_nvd

def user_specifics():
    '''
    Handles the user inputs for both hostname/ip and ports.
    Returns a tuple, ip and ports, where ports can be a list or 'common' or 'all'
    '''
    while True:
        ip = input("PLease enter the hostname or IP address: ")
        try:
            ip = socket.gethostbyname(ip) #converts hostname to IP
        except socket.gaierror: #makes sure the hostname is valid
            print("Please enter a valid hostname or IP")
            continue
        
        port_input = input("Please enter a port or range or ports (i.e 80, 20-1024), " +
                    "\nor if you would like, type 'common' to check common ports, \nor " +
                    "type 'all' to check all available ports or 'exit' to exit: ").strip().lower()
        
        if port_input.strip().lower() == 'exit':
            sys.exit()
        #Handles 'all' and 'commmon' options
        if port_input.strip().lower() == "all":
            print("Will try to connect to every port 0-65535. ")
            return ip, "all"
        elif port_input.strip().lower() == "common":
            print("Will try all the common ports, (21, 22, 23, 25, 53, 80 110, 143, 443, 3389)")
            return ip, "common"
        
        #Handles port range like 20-30
        if "-" in port_input: 
            try:
                start, end = map(int, port_input.split("-"))
                if 0 <= start <= 65535 and 0 <= end <= 65535 and start <= end:
                    return ip, list(range(start, end + 1))
                else:
                    print("Invalid port range")
            except ValueError:
                print("Invalid port format, i.e. 20-30")
                continue
        
        #Handles ports separated by commas    
        if "," in port_input:
            try:
                ports = [int(p.strip()) for p in port_input.split(",")]
                if all(0 <= p <= 65535 for p in ports):
                    return ip, ports
                else:
                    print("Ports must be between 0 and 65335 ")
                    continue
            except ValueError:
                print("invalid port format, only numbers are valid")
                continue
            
        #Handles single port inputs    
        try:
            port = int(port_input)
            if 0 <= port <= 65535:
                return ip, [port]
            else:
                print("Port must between 0 and 65535")
                continue
        except(ValueError):
            print("Invalid input, enter a valid port number or range")
            continue
        
if __name__ == "__main__":
    testing = False #toggles the testing and live scan
    print("Welcome to my vulnerability port scanner")
    nvd_data = load_nvd() #Loads NVD JSON data
    
    #Makes a file with timestamp to make sure the old file is not overwritten by new scans     
    reports_folder = r"C:\Users\bainl\Coding_Projects\PythonProjects\PythonProject1\Cyber_Sec_Projects\vulnerability_scanner_project\reports"
    timestamp = datetime.datetime.now().strftime("%d-%m-%Y_%H-%M-%S")
    os.makedirs(reports_folder, exist_ok=True)
    outpath = os.path.join(reports_folder, f"report_{timestamp}.txt")
    
    if testing:
        print("This is running the test Mode")
        
        #Mock information when testing
        port_info = {
        80: {"service": "etg3000_factorycast_hmi_gateway_firmware", "version": "1.60.2"},
        443: {"service": "somove_lite", "version": "-"},
        22: {"service": "OpenSSH", "version": "7.2p2"},
        21: {"service": "vsftpd", "version": "2.3.4"},
        3306: {"service": "MySQL", "version": "5.7.36"}
        }
        
        #Looks for vulnerabilities for each port
        for port, info in port_info.items():
            vul = find_vulnerability(info, nvd_data)
            info["vulnerabilities"] = vul
        
        #Gives results in the consol
        for port, info in port_info.items():
            print(f"\nPort {port}:")
            print(f" Service: {info.get('service')}")
            print(f" Version: {info.get('version')}")
            for v in info["vulnerabilities"]:
                print(f" - {v['cve_id']}: {v['description']}")
        
        #writes to a file for the user    
        with open(outpath, "w", encoding="utf-8") as f:
            for port, info in port_info.items():
                f.write(f"\nPort {port}:\n")
                f.write(f" Service: {info.get('service')}\n")
                f.write(f" Version: {info.get('version')}\n")
                if info["vulnerabilities"]:
                    f.write(" Vulnerabilities:\n")
                    for v in info["vulnerabilities"]:
                        f.write(f" - {v['cve_id']}: {v['description']}\n")
                else:
                    f.write(" No known vulnerabilities found.\n")
        
        
    else:
        print("Running live ports")   
        while True:
            ip, ports = user_specifics() #gets the targeted ports from user
            ip, open_ports = connect_port(ip,ports) #scans ports to see if open
            port_info = find_banner(ip, open_ports) #finds service banners
            
            #Looks for vulnerabilities for each open port
            for port, info in port_info.items():
                vul = find_vulnerability(info, nvd_data)
                info["vulnerabilities"] = vul
                
            #Gives results in the consol    
            for port, info in port_info.items(): #prints for console
                    print(f"\nPort {port}:")
                    print(f" Service: {info.get('service')}")
                    print(f" Version: {info.get('version')}")
                    if info["vulnerabilities"]:
                        print(" Vulnerabilities:")
                        for v in info["vulnerabilities"]:
                            print(f" - {v['cve_id']}: {v['description']}")
                    else:
                        print(" No known vulnerabilities found.")
            
            #writes to a file for the user                  
            with open(outpath, "w", encoding="utf-8") as f:
                for port, info in port_info.items():
                    f.write(f"\nPort {port}:\n")
                    f.write(f" Service: {info.get('service')}\n")
                    f.write(f" Version: {info.get('version')}\n")
                    if info["vulnerabilities"]:
                        f.write(" Vulnerabilities:\n")
                        for v in info["vulnerabilities"]:
                            f.write(f" - {v['cve_id']}: {v['description']}\n")
                    else:
                        f.write(" No known vulnerabilities found.\n")
        