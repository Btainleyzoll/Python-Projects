from vulnerability_scanner import connect_port
import socket
import re
def find_banner(ip, open_ports, debug = False):
    banner_keywords = [ #list of common keywords in banners
    # SSH
    "OpenSSH", "Dropbear", "libssh", "SSH",
    # HTTP / Web Servers
    "Apache", "nginx", "Microsoft-IIS", "LiteSpeed", "Caddy", "Gunicorn", "Jetty",
    # FTP
    "vsftpd", "ProFTPD", "Pure-FTPd", "FileZilla", "FTP",
    # SMTP / Mail Servers
    "Postfix", "Exim", "Sendmail", "Microsoft ESMTP", "Courier",
    # POP3 / IMAP
    "Dovecot", "Courier-IMAP", "Microsoft Exchange", "UW-IMAP",
    # Database Servers
    "MySQL", "PostgreSQL", "MongoDB", "Oracle", "Microsoft SQL Server", "MSSQL",
    # Other Common Services
    "Redis", "Memcached", "Tomcat", "ElasticSearch", "RabbitMQ"
]
    port_info = {}
    msg = b"\r\n"
    
    for port in open_ports:
        version = ""
        #iterates through every open port
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        try:
            match = socket.getservbyport(port, "tcp")
        except OSError:
            match = "Unknown"
        try:
            sock.connect((ip, port))
            
            try: 
                sock.send(msg) # sends a msg incase the port needs a probe
                banner = sock.recv(2048)
                serviceVersion = str(banner.decode(errors = "ignore"))
                
                if debug:
                    print(f"[DEBUG] Port {port} raw banner: {serviceVersion}" )
                
                for check in banner_keywords:
                    if check in serviceVersion:
                        version = ""
                        #checks to see if the common banner names are in the banner
                        m = re.search(rf"{check}[ /_-]?([0-9][0-9A-Za-z\.\-_]*)", serviceVersion)
                        if m:
                            version = m.group(1)
                        match = check
                        break
  
            except Exception:
                if debug:
                    print(f"[DEBUG] Port {port} banner read failure.")
            
            
            port_info[port] = {"service": match, "version": version or None}
            
            
             
            
        except (socket.timeout, ConnectionRefusedError): # in case the socket cannot connect
            port_info[port] = {"service": None, "version": None}
        finally:
            sock.close()
    return port_info
                
            