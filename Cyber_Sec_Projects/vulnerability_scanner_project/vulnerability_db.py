import json
def load_nvd():
    
    with open('nvdcve-2.0-modified.json', 'r', encoding='utf-8') as f:
        nvd_data = json.load(f)
        return nvd_data
    



def extract_cpes(cve):
    cpes = []
    configs = cve.get("cve", {}).get("configurations", [])
    for config in configs:
        for node in config.get("nodes", []):
            for cpe in node.get("cpeMatch", []):
                if cpe.get("vulnerable"):
                    cpes.append(cpe["criteria"])

    return cpes

def parse_cpe(cpes):
    parsed = []
    for x in cpes:
        cutup = x.split(":")
        if len(cutup) >= 6:
            
            parsed.append({"part":cutup[2], 
                           "vendor":cutup[3], 
                           "product":cutup[4], 
                           "version":cutup[5]
                           })
    return parsed    
        
        
      
def matcher(port_info, parsed_cpe):
    matches = []
    
    service_name = (port_info.get("service") or "").lower()
    service_version = (port_info.get("version") or "").lower()
    
    for cpe in parsed_cpe:
        if not service_name:
            continue
        if cpe["product"].lower() in service_name and (cpe["version"].lower() in ["*", "-", ""] or cpe["version"].lower() == service_version):
            matches.append(cpe)
    return matches

            
def find_vulnerability(port_info, nvd_data):
    vulnerabilities = []
    for vul in nvd_data.get("vulnerabilities", []):
        cve_id = vul.get("cve", {}).get("id", "Unknown")
        descriptions = vul.get("cve", {}).get("descriptions", [])
        desc = next((d["value"] for d in descriptions if d["lang"] == "en"), "")
        
        cpes = extract_cpes(vul)
        parsed_cpe = parse_cpe(cpes)
        matches = matcher(port_info, parsed_cpe)
        if matches:
            vulnerabilities.append({"cve_id": cve_id, "description": desc})
            
    if not vulnerabilities:
        vulnerabilities.append({"cve_id": "None", "description": "No banner or no vulnerability"})
    
    return vulnerabilities
    
    
    
    
              
'''cpes = [
    "cpe:2.3:a:phoenixcontact-software:multiprog:5.0:*:*:*:*:*:*:*",
    "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*"
]

print(parse_cpe(cpes))'''