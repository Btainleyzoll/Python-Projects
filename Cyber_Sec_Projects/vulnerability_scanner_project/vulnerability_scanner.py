import socket
import concurrent.futures
import threading
from tqdm import tqdm #this allows for a progress bar for the user  to see during scans

#While appending open ports, this lets it be a thread safe operation
lock = threading.Lock()

def big_scan(ip, portnum, open_ports):
    '''
    Tries to connect to single port, and if it does, it adds it to open_ports
    '''
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(.5) #Prevents hanging on ports that do not respond
    try:
        sock.connect((ip, portnum))
        #Allows only one thread to be appended at a time
        with lock:
            open_ports.append(portnum)
    except (socket.timeout, ConnectionRefusedError):
        #Ignores ports that are closed or fails to connect
        pass
    finally:
        sock.close() #Always close the socket
    
         

def connect_port(ip, ports ):
    '''
    Scans the ports the user gave with teh given IP
    Allows for all ports (0-65535), common ports, and custom user list of ports
    returns a tuple, ip and open ports list
    
    '''
    #List of ten common ports 
    common = [21, 22, 23, 25, 53, 80, 110, 143, 443, 3389]
    open_ports = []
    
    #Determines what ports are going to be scanned
    if ports == "all":
        port_range = range(0, 65535)
        print("Trying to connect to all ports")
        max_threads = 150 #large scan so higher number of workers
              
    elif ports == "common":
        port_range = common
        print("Trying to connect to common ports ")
        max_threads = 50 #small scan so smaller number of workers
        
    else:
        max_threads = 100 #default number of workers for custom range
        port_range = ports
    
    #Uses ThreadPoolExecutor to scan ports concurrently    
    with concurrent.futures.ThreadPoolExecutor(max_workers = max_threads) as executor:
        futures = [executor.submit(big_scan, ip, portnum, open_ports) for portnum in port_range]
        #tqdm makes a progress bar when scanning ports
        for _ in tqdm(concurrent.futures.as_completed(futures), total = len(futures)):
            pass    #Nothign is needed, just waiting for the scan to complete
                
    if not open_ports:
        print("No open ports were found given the specifications.")
        
    return ip, open_ports #returns ip address and list of open ports      
                
        
            